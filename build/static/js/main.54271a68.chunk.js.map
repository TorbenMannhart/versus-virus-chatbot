{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","className","src","id","class","href","alt","marginheight","marginwidth","title","allowtransparency","allowfullscreen","frameborder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"oUA8DeA,MAzDf,WACI,OACI,yBAAKC,UAAU,OACX,6BACI,gCACI,yBAAKC,IAAI,6BAIjB,yBAAKD,UAAU,qBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,sCAAsCE,GAAG,0BACnD,yBAAKA,GAAG,eACL,uBAAGC,MAAM,4BAA4BC,KAAK,QAA1C,eACA,uBAAGD,MAAM,4BAA4BC,KAAK,QAA1C,QACA,uBAAGD,MAAM,4BAA4BC,KAAK,QAA1C,+BACA,uBAAGD,MAAM,4BAA4BC,KAAK,QAA1C,yBACA,uBAAGD,MAAM,4BAA4BC,KAAK,QAA1C,oBACA,uBAAGD,MAAM,4BAA4BC,KAAK,QAA1C,aACA,uBAAGD,MAAM,4BAA4BC,KAAK,QAA1C,+BAIZ,8BACI,6BAASF,GAAG,aACR,yBAAKA,GAAG,uBAEJ,6EACA,yBAAKC,MAAM,qBAAqBD,GAAG,oBAAmB,kCAClD,uBAAGE,KAAK,IACJ,yBAAKF,GAAG,oBAAoBG,IAAI,IAAIJ,IAAI,+FAErC,4BAAQA,IAAI,yDACnB,4BAAQC,GAAG,gBAAgBI,aAAa,IAAIC,YAAY,IAAIC,MAAM,qBAAqBC,kBAAkB,OAAOC,gBAAgB,OAAOP,MAAM,aAAaF,IAAI,iUAAiXU,YAAY,QAIniB,yBAAKT,GAAG,qBAEJ,6DACA,4BAAQA,GAAG,UAAUD,IAAI,wHAGjC,oCAMR,4BAAQD,UAAU,eAAlB,0BC1CQY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,6IEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.54271a68.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport ReactWebChat from './Webchat';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <header>\r\n                    <img src=\"./kanton_zh_header.png\"></img>\r\n                </header>\r\n            </div>\r\n\r\n            <div className=\"container content\">\r\n                <div className=\"sidemenu sticky-top\">\r\n                    <div className=\"collapse navbar-collapse d-lg-block\" id=\"navbarSupportedContent\">\r\n                        {<div id=\"sidemenu-zh\">\r\n                            <a class=\"nav-link sidemenu-zh-link\" href=\"#top\">Coronavirus</a>\r\n                            <a class=\"nav-link sidemenu-zh-link\" href=\"#top\">News</a>\r\n                            <a class=\"nav-link sidemenu-zh-link\" href=\"#top\">Regierungsratsbeschl√ºsse</a>\r\n                            <a class=\"nav-link sidemenu-zh-link\" href=\"#top\">Wahlen & Abstimmungen</a>\r\n                            <a class=\"nav-link sidemenu-zh-link\" href=\"#top\">Vernehmlassungen</a>\r\n                            <a class=\"nav-link sidemenu-zh-link\" href=\"#top\">Amtsblatt</a>\r\n                            <a class=\"nav-link sidemenu-zh-link\" href=\"#top\">Kurzarbeit Informationen</a>\r\n                        </div>}\r\n                    </div>\r\n                </div>\r\n                <main>\r\n                    <section id=\"dashboard\">\r\n                        <div id=\"dashboard-container\">\r\n                            {/* <h2>Dashbaord</h2> */}\r\n                            <p>Aktuelle Informationen zur Lage in der Schweiz</p>\r\n                            <div class=\"tableauPlaceholder\" id=\"viz1585984946311\"><noscript>\r\n                                <a href=''>\r\n                                    <img id=\"bag-dashboard-img\" alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Co&#47;Covid19_15852360559170&#47;Dashboard1d&#47;1_rss.png' />\r\n                                </a>\r\n                            </noscript><script src=\"https://public.tableau.com/javascripts/api/viz_v1.js\"></script>\r\n                                <iframe id=\"bag-dashboard\" marginheight=\"0\" marginwidth=\"0\" title=\"Data Visualization\" allowtransparency=\"true\" allowfullscreen=\"true\" class=\"tableauViz\" src=\"https://public.tableau.com/views/Covid19_15852360559170/Dashboard1d?:embed=y&amp;:showVizHome=no&amp;:host_url=https%3A%2F%2Fpublic.tableau.com%2F&amp;:embed_code_version=3&amp;:tabs=no&amp;:toolbar=yes&amp;:animate_transition=yes&amp;:display_static_image=no&amp;:display_spinner=no&amp;:display_overlay=yes&amp;:display_count=yes&amp;publish=yes&amp;:loadOrderID=0\" frameborder=\"0\"></iframe>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div id=\"chatbot-container\">\r\n                            {/* <h2>Chatbot</h2> */}\r\n                            <p>Hast du Fragen zur Kurzarbeit?</p>\r\n                            <iframe id=\"chatbot\" src='https://webchat.botframework.com/embed/versus-virus-bot?s=gBMtzerPyr0.o4xxgEoupK0Z4MCeTYCQvtBNn3Hdv0nqTmGiHWZrx0w'></iframe>\r\n                        </div>\r\n                    </section>\r\n                    <section>\r\n                    </section>\r\n                </main>\r\n\r\n            </div>\r\n\r\n            <footer className=\"text-center\">\r\n                &copy; David Stammbach\r\n        </footer>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}